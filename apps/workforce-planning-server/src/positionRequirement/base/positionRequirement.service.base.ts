/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PositionRequirement as PrismaPositionRequirement,
  EmployeeAssignment as PrismaEmployeeAssignment,
  ProjectStage as PrismaProjectStage,
} from "@prisma/client";

export class PositionRequirementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PositionRequirementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.positionRequirement.count(args);
  }

  async positionRequirements(
    args: Prisma.PositionRequirementFindManyArgs
  ): Promise<PrismaPositionRequirement[]> {
    return this.prisma.positionRequirement.findMany(args);
  }
  async positionRequirement(
    args: Prisma.PositionRequirementFindUniqueArgs
  ): Promise<PrismaPositionRequirement | null> {
    return this.prisma.positionRequirement.findUnique(args);
  }
  async createPositionRequirement(
    args: Prisma.PositionRequirementCreateArgs
  ): Promise<PrismaPositionRequirement> {
    return this.prisma.positionRequirement.create(args);
  }
  async updatePositionRequirement(
    args: Prisma.PositionRequirementUpdateArgs
  ): Promise<PrismaPositionRequirement> {
    return this.prisma.positionRequirement.update(args);
  }
  async deletePositionRequirement(
    args: Prisma.PositionRequirementDeleteArgs
  ): Promise<PrismaPositionRequirement> {
    return this.prisma.positionRequirement.delete(args);
  }

  async findEmployeeAssignments(
    parentId: string,
    args: Prisma.EmployeeAssignmentFindManyArgs
  ): Promise<PrismaEmployeeAssignment[]> {
    return this.prisma.positionRequirement
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeAssignments(args);
  }

  async getProjectStage(parentId: string): Promise<PrismaProjectStage | null> {
    return this.prisma.positionRequirement
      .findUnique({
        where: { id: parentId },
      })
      .projectStage();
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PositionRequirementService } from "../positionRequirement.service";
import { PositionRequirementCreateInput } from "./PositionRequirementCreateInput";
import { PositionRequirement } from "./PositionRequirement";
import { PositionRequirementFindManyArgs } from "./PositionRequirementFindManyArgs";
import { PositionRequirementWhereUniqueInput } from "./PositionRequirementWhereUniqueInput";
import { PositionRequirementUpdateInput } from "./PositionRequirementUpdateInput";
import { EmployeeAssignmentFindManyArgs } from "../../employeeAssignment/base/EmployeeAssignmentFindManyArgs";
import { EmployeeAssignment } from "../../employeeAssignment/base/EmployeeAssignment";
import { EmployeeAssignmentWhereUniqueInput } from "../../employeeAssignment/base/EmployeeAssignmentWhereUniqueInput";

export class PositionRequirementControllerBase {
  constructor(protected readonly service: PositionRequirementService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PositionRequirement })
  async createPositionRequirement(
    @common.Body() data: PositionRequirementCreateInput
  ): Promise<PositionRequirement> {
    return await this.service.createPositionRequirement({
      data: {
        ...data,

        projectStage: data.projectStage
          ? {
              connect: data.projectStage,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        jobTitle: true,

        projectStage: {
          select: {
            id: true,
          },
        },

        quantity: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PositionRequirement] })
  @ApiNestedQuery(PositionRequirementFindManyArgs)
  async positionRequirements(
    @common.Req() request: Request
  ): Promise<PositionRequirement[]> {
    const args = plainToClass(PositionRequirementFindManyArgs, request.query);
    return this.service.positionRequirements({
      ...args,
      select: {
        createdAt: true,
        id: true,
        jobTitle: true,

        projectStage: {
          select: {
            id: true,
          },
        },

        quantity: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PositionRequirement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async positionRequirement(
    @common.Param() params: PositionRequirementWhereUniqueInput
  ): Promise<PositionRequirement | null> {
    const result = await this.service.positionRequirement({
      where: params,
      select: {
        createdAt: true,
        id: true,
        jobTitle: true,

        projectStage: {
          select: {
            id: true,
          },
        },

        quantity: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PositionRequirement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePositionRequirement(
    @common.Param() params: PositionRequirementWhereUniqueInput,
    @common.Body() data: PositionRequirementUpdateInput
  ): Promise<PositionRequirement | null> {
    try {
      return await this.service.updatePositionRequirement({
        where: params,
        data: {
          ...data,

          projectStage: data.projectStage
            ? {
                connect: data.projectStage,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          jobTitle: true,

          projectStage: {
            select: {
              id: true,
            },
          },

          quantity: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PositionRequirement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePositionRequirement(
    @common.Param() params: PositionRequirementWhereUniqueInput
  ): Promise<PositionRequirement | null> {
    try {
      return await this.service.deletePositionRequirement({
        where: params,
        select: {
          createdAt: true,
          id: true,
          jobTitle: true,

          projectStage: {
            select: {
              id: true,
            },
          },

          quantity: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/employeeAssignments")
  @ApiNestedQuery(EmployeeAssignmentFindManyArgs)
  async findEmployeeAssignments(
    @common.Req() request: Request,
    @common.Param() params: PositionRequirementWhereUniqueInput
  ): Promise<EmployeeAssignment[]> {
    const query = plainToClass(EmployeeAssignmentFindManyArgs, request.query);
    const results = await this.service.findEmployeeAssignments(params.id, {
      ...query,
      select: {
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        endDate: true,
        id: true,
        loading: true,

        positionRequirement: {
          select: {
            id: true,
          },
        },

        project: {
          select: {
            id: true,
          },
        },

        startDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeAssignments")
  async connectEmployeeAssignments(
    @common.Param() params: PositionRequirementWhereUniqueInput,
    @common.Body() body: EmployeeAssignmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeAssignments: {
        connect: body,
      },
    };
    await this.service.updatePositionRequirement({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeAssignments")
  async updateEmployeeAssignments(
    @common.Param() params: PositionRequirementWhereUniqueInput,
    @common.Body() body: EmployeeAssignmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeAssignments: {
        set: body,
      },
    };
    await this.service.updatePositionRequirement({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeAssignments")
  async disconnectEmployeeAssignments(
    @common.Param() params: PositionRequirementWhereUniqueInput,
    @common.Body() body: EmployeeAssignmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeAssignments: {
        disconnect: body,
      },
    };
    await this.service.updatePositionRequirement({
      where: params,
      data,
      select: { id: true },
    });
  }
}

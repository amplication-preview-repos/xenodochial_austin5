/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PositionRequirement } from "./PositionRequirement";
import { PositionRequirementCountArgs } from "./PositionRequirementCountArgs";
import { PositionRequirementFindManyArgs } from "./PositionRequirementFindManyArgs";
import { PositionRequirementFindUniqueArgs } from "./PositionRequirementFindUniqueArgs";
import { CreatePositionRequirementArgs } from "./CreatePositionRequirementArgs";
import { UpdatePositionRequirementArgs } from "./UpdatePositionRequirementArgs";
import { DeletePositionRequirementArgs } from "./DeletePositionRequirementArgs";
import { EmployeeAssignmentFindManyArgs } from "../../employeeAssignment/base/EmployeeAssignmentFindManyArgs";
import { EmployeeAssignment } from "../../employeeAssignment/base/EmployeeAssignment";
import { ProjectStage } from "../../projectStage/base/ProjectStage";
import { PositionRequirementService } from "../positionRequirement.service";
@graphql.Resolver(() => PositionRequirement)
export class PositionRequirementResolverBase {
  constructor(protected readonly service: PositionRequirementService) {}

  async _positionRequirementsMeta(
    @graphql.Args() args: PositionRequirementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PositionRequirement])
  async positionRequirements(
    @graphql.Args() args: PositionRequirementFindManyArgs
  ): Promise<PositionRequirement[]> {
    return this.service.positionRequirements(args);
  }

  @graphql.Query(() => PositionRequirement, { nullable: true })
  async positionRequirement(
    @graphql.Args() args: PositionRequirementFindUniqueArgs
  ): Promise<PositionRequirement | null> {
    const result = await this.service.positionRequirement(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PositionRequirement)
  async createPositionRequirement(
    @graphql.Args() args: CreatePositionRequirementArgs
  ): Promise<PositionRequirement> {
    return await this.service.createPositionRequirement({
      ...args,
      data: {
        ...args.data,

        projectStage: args.data.projectStage
          ? {
              connect: args.data.projectStage,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PositionRequirement)
  async updatePositionRequirement(
    @graphql.Args() args: UpdatePositionRequirementArgs
  ): Promise<PositionRequirement | null> {
    try {
      return await this.service.updatePositionRequirement({
        ...args,
        data: {
          ...args.data,

          projectStage: args.data.projectStage
            ? {
                connect: args.data.projectStage,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PositionRequirement)
  async deletePositionRequirement(
    @graphql.Args() args: DeletePositionRequirementArgs
  ): Promise<PositionRequirement | null> {
    try {
      return await this.service.deletePositionRequirement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [EmployeeAssignment], {
    name: "employeeAssignments",
  })
  async findEmployeeAssignments(
    @graphql.Parent() parent: PositionRequirement,
    @graphql.Args() args: EmployeeAssignmentFindManyArgs
  ): Promise<EmployeeAssignment[]> {
    const results = await this.service.findEmployeeAssignments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => ProjectStage, {
    nullable: true,
    name: "projectStage",
  })
  async getProjectStage(
    @graphql.Parent() parent: PositionRequirement
  ): Promise<ProjectStage | null> {
    const result = await this.service.getProjectStage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

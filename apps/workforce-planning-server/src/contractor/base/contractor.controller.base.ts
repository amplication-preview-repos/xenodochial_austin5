/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContractorService } from "../contractor.service";
import { ContractorCreateInput } from "./ContractorCreateInput";
import { Contractor } from "./Contractor";
import { ContractorFindManyArgs } from "./ContractorFindManyArgs";
import { ContractorWhereUniqueInput } from "./ContractorWhereUniqueInput";
import { ContractorUpdateInput } from "./ContractorUpdateInput";
import { ContractorAssignmentFindManyArgs } from "../../contractorAssignment/base/ContractorAssignmentFindManyArgs";
import { ContractorAssignment } from "../../contractorAssignment/base/ContractorAssignment";
import { ContractorAssignmentWhereUniqueInput } from "../../contractorAssignment/base/ContractorAssignmentWhereUniqueInput";

export class ContractorControllerBase {
  constructor(protected readonly service: ContractorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Contractor })
  async createContractor(
    @common.Body() data: ContractorCreateInput
  ): Promise<Contractor> {
    return await this.service.createContractor({
      data: data,
      select: {
        contractEndDate: true,
        contractStartDate: true,
        createdAt: true,
        id: true,
        loading: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Contractor] })
  @ApiNestedQuery(ContractorFindManyArgs)
  async contractors(@common.Req() request: Request): Promise<Contractor[]> {
    const args = plainToClass(ContractorFindManyArgs, request.query);
    return this.service.contractors({
      ...args,
      select: {
        contractEndDate: true,
        contractStartDate: true,
        createdAt: true,
        id: true,
        loading: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Contractor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contractor(
    @common.Param() params: ContractorWhereUniqueInput
  ): Promise<Contractor | null> {
    const result = await this.service.contractor({
      where: params,
      select: {
        contractEndDate: true,
        contractStartDate: true,
        createdAt: true,
        id: true,
        loading: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Contractor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateContractor(
    @common.Param() params: ContractorWhereUniqueInput,
    @common.Body() data: ContractorUpdateInput
  ): Promise<Contractor | null> {
    try {
      return await this.service.updateContractor({
        where: params,
        data: data,
        select: {
          contractEndDate: true,
          contractStartDate: true,
          createdAt: true,
          id: true,
          loading: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Contractor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContractor(
    @common.Param() params: ContractorWhereUniqueInput
  ): Promise<Contractor | null> {
    try {
      return await this.service.deleteContractor({
        where: params,
        select: {
          contractEndDate: true,
          contractStartDate: true,
          createdAt: true,
          id: true,
          loading: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/contractorAssignments")
  @ApiNestedQuery(ContractorAssignmentFindManyArgs)
  async findContractorAssignments(
    @common.Req() request: Request,
    @common.Param() params: ContractorWhereUniqueInput
  ): Promise<ContractorAssignment[]> {
    const query = plainToClass(ContractorAssignmentFindManyArgs, request.query);
    const results = await this.service.findContractorAssignments(params.id, {
      ...query,
      select: {
        contractor: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        endDate: true,
        id: true,
        loading: true,

        projectStage: {
          select: {
            id: true,
          },
        },

        startDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/contractorAssignments")
  async connectContractorAssignments(
    @common.Param() params: ContractorWhereUniqueInput,
    @common.Body() body: ContractorAssignmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contractorAssignments: {
        connect: body,
      },
    };
    await this.service.updateContractor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/contractorAssignments")
  async updateContractorAssignments(
    @common.Param() params: ContractorWhereUniqueInput,
    @common.Body() body: ContractorAssignmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contractorAssignments: {
        set: body,
      },
    };
    await this.service.updateContractor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/contractorAssignments")
  async disconnectContractorAssignments(
    @common.Param() params: ContractorWhereUniqueInput,
    @common.Body() body: ContractorAssignmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contractorAssignments: {
        disconnect: body,
      },
    };
    await this.service.updateContractor({
      where: params,
      data,
      select: { id: true },
    });
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Contractor } from "./Contractor";
import { ContractorCountArgs } from "./ContractorCountArgs";
import { ContractorFindManyArgs } from "./ContractorFindManyArgs";
import { ContractorFindUniqueArgs } from "./ContractorFindUniqueArgs";
import { CreateContractorArgs } from "./CreateContractorArgs";
import { UpdateContractorArgs } from "./UpdateContractorArgs";
import { DeleteContractorArgs } from "./DeleteContractorArgs";
import { ContractorAssignmentFindManyArgs } from "../../contractorAssignment/base/ContractorAssignmentFindManyArgs";
import { ContractorAssignment } from "../../contractorAssignment/base/ContractorAssignment";
import { ContractorService } from "../contractor.service";
@graphql.Resolver(() => Contractor)
export class ContractorResolverBase {
  constructor(protected readonly service: ContractorService) {}

  async _contractorsMeta(
    @graphql.Args() args: ContractorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Contractor])
  async contractors(
    @graphql.Args() args: ContractorFindManyArgs
  ): Promise<Contractor[]> {
    return this.service.contractors(args);
  }

  @graphql.Query(() => Contractor, { nullable: true })
  async contractor(
    @graphql.Args() args: ContractorFindUniqueArgs
  ): Promise<Contractor | null> {
    const result = await this.service.contractor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Contractor)
  async createContractor(
    @graphql.Args() args: CreateContractorArgs
  ): Promise<Contractor> {
    return await this.service.createContractor({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Contractor)
  async updateContractor(
    @graphql.Args() args: UpdateContractorArgs
  ): Promise<Contractor | null> {
    try {
      return await this.service.updateContractor({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Contractor)
  async deleteContractor(
    @graphql.Args() args: DeleteContractorArgs
  ): Promise<Contractor | null> {
    try {
      return await this.service.deleteContractor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [ContractorAssignment], {
    name: "contractorAssignments",
  })
  async findContractorAssignments(
    @graphql.Parent() parent: Contractor,
    @graphql.Args() args: ContractorAssignmentFindManyArgs
  ): Promise<ContractorAssignment[]> {
    const results = await this.service.findContractorAssignments(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Contractor as PrismaContractor,
  ContractorAssignment as PrismaContractorAssignment,
} from "@prisma/client";

export class ContractorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ContractorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.contractor.count(args);
  }

  async contractors(
    args: Prisma.ContractorFindManyArgs
  ): Promise<PrismaContractor[]> {
    return this.prisma.contractor.findMany(args);
  }
  async contractor(
    args: Prisma.ContractorFindUniqueArgs
  ): Promise<PrismaContractor | null> {
    return this.prisma.contractor.findUnique(args);
  }
  async createContractor(
    args: Prisma.ContractorCreateArgs
  ): Promise<PrismaContractor> {
    return this.prisma.contractor.create(args);
  }
  async updateContractor(
    args: Prisma.ContractorUpdateArgs
  ): Promise<PrismaContractor> {
    return this.prisma.contractor.update(args);
  }
  async deleteContractor(
    args: Prisma.ContractorDeleteArgs
  ): Promise<PrismaContractor> {
    return this.prisma.contractor.delete(args);
  }

  async findContractorAssignments(
    parentId: string,
    args: Prisma.ContractorAssignmentFindManyArgs
  ): Promise<PrismaContractorAssignment[]> {
    return this.prisma.contractor
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .contractorAssignments(args);
  }
}

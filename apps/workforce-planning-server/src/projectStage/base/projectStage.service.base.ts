/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ProjectStage as PrismaProjectStage,
  ContractorAssignment as PrismaContractorAssignment,
  PositionRequirement as PrismaPositionRequirement,
  Project as PrismaProject,
} from "@prisma/client";

export class ProjectStageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProjectStageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.projectStage.count(args);
  }

  async projectStages(
    args: Prisma.ProjectStageFindManyArgs
  ): Promise<PrismaProjectStage[]> {
    return this.prisma.projectStage.findMany(args);
  }
  async projectStage(
    args: Prisma.ProjectStageFindUniqueArgs
  ): Promise<PrismaProjectStage | null> {
    return this.prisma.projectStage.findUnique(args);
  }
  async createProjectStage(
    args: Prisma.ProjectStageCreateArgs
  ): Promise<PrismaProjectStage> {
    return this.prisma.projectStage.create(args);
  }
  async updateProjectStage(
    args: Prisma.ProjectStageUpdateArgs
  ): Promise<PrismaProjectStage> {
    return this.prisma.projectStage.update(args);
  }
  async deleteProjectStage(
    args: Prisma.ProjectStageDeleteArgs
  ): Promise<PrismaProjectStage> {
    return this.prisma.projectStage.delete(args);
  }

  async findContractorAssignments(
    parentId: string,
    args: Prisma.ContractorAssignmentFindManyArgs
  ): Promise<PrismaContractorAssignment[]> {
    return this.prisma.projectStage
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .contractorAssignments(args);
  }

  async findPositionRequirements(
    parentId: string,
    args: Prisma.PositionRequirementFindManyArgs
  ): Promise<PrismaPositionRequirement[]> {
    return this.prisma.projectStage
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .positionRequirements(args);
  }

  async getProject(parentId: string): Promise<PrismaProject | null> {
    return this.prisma.projectStage
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }
}

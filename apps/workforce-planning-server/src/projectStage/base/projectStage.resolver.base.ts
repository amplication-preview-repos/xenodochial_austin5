/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProjectStage } from "./ProjectStage";
import { ProjectStageCountArgs } from "./ProjectStageCountArgs";
import { ProjectStageFindManyArgs } from "./ProjectStageFindManyArgs";
import { ProjectStageFindUniqueArgs } from "./ProjectStageFindUniqueArgs";
import { CreateProjectStageArgs } from "./CreateProjectStageArgs";
import { UpdateProjectStageArgs } from "./UpdateProjectStageArgs";
import { DeleteProjectStageArgs } from "./DeleteProjectStageArgs";
import { ContractorAssignmentFindManyArgs } from "../../contractorAssignment/base/ContractorAssignmentFindManyArgs";
import { ContractorAssignment } from "../../contractorAssignment/base/ContractorAssignment";
import { PositionRequirementFindManyArgs } from "../../positionRequirement/base/PositionRequirementFindManyArgs";
import { PositionRequirement } from "../../positionRequirement/base/PositionRequirement";
import { Project } from "../../project/base/Project";
import { ProjectStageService } from "../projectStage.service";
@graphql.Resolver(() => ProjectStage)
export class ProjectStageResolverBase {
  constructor(protected readonly service: ProjectStageService) {}

  async _projectStagesMeta(
    @graphql.Args() args: ProjectStageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProjectStage])
  async projectStages(
    @graphql.Args() args: ProjectStageFindManyArgs
  ): Promise<ProjectStage[]> {
    return this.service.projectStages(args);
  }

  @graphql.Query(() => ProjectStage, { nullable: true })
  async projectStage(
    @graphql.Args() args: ProjectStageFindUniqueArgs
  ): Promise<ProjectStage | null> {
    const result = await this.service.projectStage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProjectStage)
  async createProjectStage(
    @graphql.Args() args: CreateProjectStageArgs
  ): Promise<ProjectStage> {
    return await this.service.createProjectStage({
      ...args,
      data: {
        ...args.data,

        project: args.data.project
          ? {
              connect: args.data.project,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ProjectStage)
  async updateProjectStage(
    @graphql.Args() args: UpdateProjectStageArgs
  ): Promise<ProjectStage | null> {
    try {
      return await this.service.updateProjectStage({
        ...args,
        data: {
          ...args.data,

          project: args.data.project
            ? {
                connect: args.data.project,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProjectStage)
  async deleteProjectStage(
    @graphql.Args() args: DeleteProjectStageArgs
  ): Promise<ProjectStage | null> {
    try {
      return await this.service.deleteProjectStage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [ContractorAssignment], {
    name: "contractorAssignments",
  })
  async findContractorAssignments(
    @graphql.Parent() parent: ProjectStage,
    @graphql.Args() args: ContractorAssignmentFindManyArgs
  ): Promise<ContractorAssignment[]> {
    const results = await this.service.findContractorAssignments(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [PositionRequirement], {
    name: "positionRequirements",
  })
  async findPositionRequirements(
    @graphql.Parent() parent: ProjectStage,
    @graphql.Args() args: PositionRequirementFindManyArgs
  ): Promise<PositionRequirement[]> {
    const results = await this.service.findPositionRequirements(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Project, {
    nullable: true,
    name: "project",
  })
  async getProject(
    @graphql.Parent() parent: ProjectStage
  ): Promise<Project | null> {
    const result = await this.service.getProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EmployeeAssignment } from "./EmployeeAssignment";
import { EmployeeAssignmentCountArgs } from "./EmployeeAssignmentCountArgs";
import { EmployeeAssignmentFindManyArgs } from "./EmployeeAssignmentFindManyArgs";
import { EmployeeAssignmentFindUniqueArgs } from "./EmployeeAssignmentFindUniqueArgs";
import { CreateEmployeeAssignmentArgs } from "./CreateEmployeeAssignmentArgs";
import { UpdateEmployeeAssignmentArgs } from "./UpdateEmployeeAssignmentArgs";
import { DeleteEmployeeAssignmentArgs } from "./DeleteEmployeeAssignmentArgs";
import { Employee } from "../../employee/base/Employee";
import { PositionRequirement } from "../../positionRequirement/base/PositionRequirement";
import { Project } from "../../project/base/Project";
import { EmployeeAssignmentService } from "../employeeAssignment.service";
@graphql.Resolver(() => EmployeeAssignment)
export class EmployeeAssignmentResolverBase {
  constructor(protected readonly service: EmployeeAssignmentService) {}

  async _employeeAssignmentsMeta(
    @graphql.Args() args: EmployeeAssignmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmployeeAssignment])
  async employeeAssignments(
    @graphql.Args() args: EmployeeAssignmentFindManyArgs
  ): Promise<EmployeeAssignment[]> {
    return this.service.employeeAssignments(args);
  }

  @graphql.Query(() => EmployeeAssignment, { nullable: true })
  async employeeAssignment(
    @graphql.Args() args: EmployeeAssignmentFindUniqueArgs
  ): Promise<EmployeeAssignment | null> {
    const result = await this.service.employeeAssignment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmployeeAssignment)
  async createEmployeeAssignment(
    @graphql.Args() args: CreateEmployeeAssignmentArgs
  ): Promise<EmployeeAssignment> {
    return await this.service.createEmployeeAssignment({
      ...args,
      data: {
        ...args.data,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,

        positionRequirement: args.data.positionRequirement
          ? {
              connect: args.data.positionRequirement,
            }
          : undefined,

        project: args.data.project
          ? {
              connect: args.data.project,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => EmployeeAssignment)
  async updateEmployeeAssignment(
    @graphql.Args() args: UpdateEmployeeAssignmentArgs
  ): Promise<EmployeeAssignment | null> {
    try {
      return await this.service.updateEmployeeAssignment({
        ...args,
        data: {
          ...args.data,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,

          positionRequirement: args.data.positionRequirement
            ? {
                connect: args.data.positionRequirement,
              }
            : undefined,

          project: args.data.project
            ? {
                connect: args.data.project,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeAssignment)
  async deleteEmployeeAssignment(
    @graphql.Args() args: DeleteEmployeeAssignmentArgs
  ): Promise<EmployeeAssignment | null> {
    try {
      return await this.service.deleteEmployeeAssignment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async getEmployee(
    @graphql.Parent() parent: EmployeeAssignment
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => PositionRequirement, {
    nullable: true,
    name: "positionRequirement",
  })
  async getPositionRequirement(
    @graphql.Parent() parent: EmployeeAssignment
  ): Promise<PositionRequirement | null> {
    const result = await this.service.getPositionRequirement(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Project, {
    nullable: true,
    name: "project",
  })
  async getProject(
    @graphql.Parent() parent: EmployeeAssignment
  ): Promise<Project | null> {
    const result = await this.service.getProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

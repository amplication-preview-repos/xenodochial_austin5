/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  EmployeeAssignment as PrismaEmployeeAssignment,
  Employee as PrismaEmployee,
  PositionRequirement as PrismaPositionRequirement,
  Project as PrismaProject,
} from "@prisma/client";

export class EmployeeAssignmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EmployeeAssignmentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.employeeAssignment.count(args);
  }

  async employeeAssignments(
    args: Prisma.EmployeeAssignmentFindManyArgs
  ): Promise<PrismaEmployeeAssignment[]> {
    return this.prisma.employeeAssignment.findMany(args);
  }
  async employeeAssignment(
    args: Prisma.EmployeeAssignmentFindUniqueArgs
  ): Promise<PrismaEmployeeAssignment | null> {
    return this.prisma.employeeAssignment.findUnique(args);
  }
  async createEmployeeAssignment(
    args: Prisma.EmployeeAssignmentCreateArgs
  ): Promise<PrismaEmployeeAssignment> {
    return this.prisma.employeeAssignment.create(args);
  }
  async updateEmployeeAssignment(
    args: Prisma.EmployeeAssignmentUpdateArgs
  ): Promise<PrismaEmployeeAssignment> {
    return this.prisma.employeeAssignment.update(args);
  }
  async deleteEmployeeAssignment(
    args: Prisma.EmployeeAssignmentDeleteArgs
  ): Promise<PrismaEmployeeAssignment> {
    return this.prisma.employeeAssignment.delete(args);
  }

  async getEmployee(parentId: string): Promise<PrismaEmployee | null> {
    return this.prisma.employeeAssignment
      .findUnique({
        where: { id: parentId },
      })
      .employee();
  }

  async getPositionRequirement(
    parentId: string
  ): Promise<PrismaPositionRequirement | null> {
    return this.prisma.employeeAssignment
      .findUnique({
        where: { id: parentId },
      })
      .positionRequirement();
  }

  async getProject(parentId: string): Promise<PrismaProject | null> {
    return this.prisma.employeeAssignment
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }
}

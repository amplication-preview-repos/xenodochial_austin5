/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmployeeAssignmentService } from "../employeeAssignment.service";
import { EmployeeAssignmentCreateInput } from "./EmployeeAssignmentCreateInput";
import { EmployeeAssignment } from "./EmployeeAssignment";
import { EmployeeAssignmentFindManyArgs } from "./EmployeeAssignmentFindManyArgs";
import { EmployeeAssignmentWhereUniqueInput } from "./EmployeeAssignmentWhereUniqueInput";
import { EmployeeAssignmentUpdateInput } from "./EmployeeAssignmentUpdateInput";

export class EmployeeAssignmentControllerBase {
  constructor(protected readonly service: EmployeeAssignmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmployeeAssignment })
  async createEmployeeAssignment(
    @common.Body() data: EmployeeAssignmentCreateInput
  ): Promise<EmployeeAssignment> {
    return await this.service.createEmployeeAssignment({
      data: {
        ...data,

        employee: data.employee
          ? {
              connect: data.employee,
            }
          : undefined,

        positionRequirement: data.positionRequirement
          ? {
              connect: data.positionRequirement,
            }
          : undefined,

        project: data.project
          ? {
              connect: data.project,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        endDate: true,
        id: true,
        loading: true,

        positionRequirement: {
          select: {
            id: true,
          },
        },

        project: {
          select: {
            id: true,
          },
        },

        startDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EmployeeAssignment] })
  @ApiNestedQuery(EmployeeAssignmentFindManyArgs)
  async employeeAssignments(
    @common.Req() request: Request
  ): Promise<EmployeeAssignment[]> {
    const args = plainToClass(EmployeeAssignmentFindManyArgs, request.query);
    return this.service.employeeAssignments({
      ...args,
      select: {
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        endDate: true,
        id: true,
        loading: true,

        positionRequirement: {
          select: {
            id: true,
          },
        },

        project: {
          select: {
            id: true,
          },
        },

        startDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmployeeAssignment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async employeeAssignment(
    @common.Param() params: EmployeeAssignmentWhereUniqueInput
  ): Promise<EmployeeAssignment | null> {
    const result = await this.service.employeeAssignment({
      where: params,
      select: {
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        endDate: true,
        id: true,
        loading: true,

        positionRequirement: {
          select: {
            id: true,
          },
        },

        project: {
          select: {
            id: true,
          },
        },

        startDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmployeeAssignment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEmployeeAssignment(
    @common.Param() params: EmployeeAssignmentWhereUniqueInput,
    @common.Body() data: EmployeeAssignmentUpdateInput
  ): Promise<EmployeeAssignment | null> {
    try {
      return await this.service.updateEmployeeAssignment({
        where: params,
        data: {
          ...data,

          employee: data.employee
            ? {
                connect: data.employee,
              }
            : undefined,

          positionRequirement: data.positionRequirement
            ? {
                connect: data.positionRequirement,
              }
            : undefined,

          project: data.project
            ? {
                connect: data.project,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          employee: {
            select: {
              id: true,
            },
          },

          endDate: true,
          id: true,
          loading: true,

          positionRequirement: {
            select: {
              id: true,
            },
          },

          project: {
            select: {
              id: true,
            },
          },

          startDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmployeeAssignment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmployeeAssignment(
    @common.Param() params: EmployeeAssignmentWhereUniqueInput
  ): Promise<EmployeeAssignment | null> {
    try {
      return await this.service.deleteEmployeeAssignment({
        where: params,
        select: {
          createdAt: true,

          employee: {
            select: {
              id: true,
            },
          },

          endDate: true,
          id: true,
          loading: true,

          positionRequirement: {
            select: {
              id: true,
            },
          },

          project: {
            select: {
              id: true,
            },
          },

          startDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

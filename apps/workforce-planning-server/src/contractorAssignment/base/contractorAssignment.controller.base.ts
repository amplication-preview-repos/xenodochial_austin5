/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContractorAssignmentService } from "../contractorAssignment.service";
import { ContractorAssignmentCreateInput } from "./ContractorAssignmentCreateInput";
import { ContractorAssignment } from "./ContractorAssignment";
import { ContractorAssignmentFindManyArgs } from "./ContractorAssignmentFindManyArgs";
import { ContractorAssignmentWhereUniqueInput } from "./ContractorAssignmentWhereUniqueInput";
import { ContractorAssignmentUpdateInput } from "./ContractorAssignmentUpdateInput";

export class ContractorAssignmentControllerBase {
  constructor(protected readonly service: ContractorAssignmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ContractorAssignment })
  async createContractorAssignment(
    @common.Body() data: ContractorAssignmentCreateInput
  ): Promise<ContractorAssignment> {
    return await this.service.createContractorAssignment({
      data: {
        ...data,

        contractor: data.contractor
          ? {
              connect: data.contractor,
            }
          : undefined,

        projectStage: data.projectStage
          ? {
              connect: data.projectStage,
            }
          : undefined,
      },
      select: {
        contractor: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        endDate: true,
        id: true,
        loading: true,

        projectStage: {
          select: {
            id: true,
          },
        },

        startDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ContractorAssignment] })
  @ApiNestedQuery(ContractorAssignmentFindManyArgs)
  async contractorAssignments(
    @common.Req() request: Request
  ): Promise<ContractorAssignment[]> {
    const args = plainToClass(ContractorAssignmentFindManyArgs, request.query);
    return this.service.contractorAssignments({
      ...args,
      select: {
        contractor: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        endDate: true,
        id: true,
        loading: true,

        projectStage: {
          select: {
            id: true,
          },
        },

        startDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ContractorAssignment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contractorAssignment(
    @common.Param() params: ContractorAssignmentWhereUniqueInput
  ): Promise<ContractorAssignment | null> {
    const result = await this.service.contractorAssignment({
      where: params,
      select: {
        contractor: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        endDate: true,
        id: true,
        loading: true,

        projectStage: {
          select: {
            id: true,
          },
        },

        startDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ContractorAssignment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateContractorAssignment(
    @common.Param() params: ContractorAssignmentWhereUniqueInput,
    @common.Body() data: ContractorAssignmentUpdateInput
  ): Promise<ContractorAssignment | null> {
    try {
      return await this.service.updateContractorAssignment({
        where: params,
        data: {
          ...data,

          contractor: data.contractor
            ? {
                connect: data.contractor,
              }
            : undefined,

          projectStage: data.projectStage
            ? {
                connect: data.projectStage,
              }
            : undefined,
        },
        select: {
          contractor: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          endDate: true,
          id: true,
          loading: true,

          projectStage: {
            select: {
              id: true,
            },
          },

          startDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ContractorAssignment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContractorAssignment(
    @common.Param() params: ContractorAssignmentWhereUniqueInput
  ): Promise<ContractorAssignment | null> {
    try {
      return await this.service.deleteContractorAssignment({
        where: params,
        select: {
          contractor: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          endDate: true,
          id: true,
          loading: true,

          projectStage: {
            select: {
              id: true,
            },
          },

          startDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

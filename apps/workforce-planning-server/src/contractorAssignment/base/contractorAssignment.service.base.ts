/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ContractorAssignment as PrismaContractorAssignment,
  Contractor as PrismaContractor,
  ProjectStage as PrismaProjectStage,
} from "@prisma/client";

export class ContractorAssignmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ContractorAssignmentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.contractorAssignment.count(args);
  }

  async contractorAssignments(
    args: Prisma.ContractorAssignmentFindManyArgs
  ): Promise<PrismaContractorAssignment[]> {
    return this.prisma.contractorAssignment.findMany(args);
  }
  async contractorAssignment(
    args: Prisma.ContractorAssignmentFindUniqueArgs
  ): Promise<PrismaContractorAssignment | null> {
    return this.prisma.contractorAssignment.findUnique(args);
  }
  async createContractorAssignment(
    args: Prisma.ContractorAssignmentCreateArgs
  ): Promise<PrismaContractorAssignment> {
    return this.prisma.contractorAssignment.create(args);
  }
  async updateContractorAssignment(
    args: Prisma.ContractorAssignmentUpdateArgs
  ): Promise<PrismaContractorAssignment> {
    return this.prisma.contractorAssignment.update(args);
  }
  async deleteContractorAssignment(
    args: Prisma.ContractorAssignmentDeleteArgs
  ): Promise<PrismaContractorAssignment> {
    return this.prisma.contractorAssignment.delete(args);
  }

  async getContractor(parentId: string): Promise<PrismaContractor | null> {
    return this.prisma.contractorAssignment
      .findUnique({
        where: { id: parentId },
      })
      .contractor();
  }

  async getProjectStage(parentId: string): Promise<PrismaProjectStage | null> {
    return this.prisma.contractorAssignment
      .findUnique({
        where: { id: parentId },
      })
      .projectStage();
  }
}

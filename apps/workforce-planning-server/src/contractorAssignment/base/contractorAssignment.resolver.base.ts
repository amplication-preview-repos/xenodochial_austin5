/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ContractorAssignment } from "./ContractorAssignment";
import { ContractorAssignmentCountArgs } from "./ContractorAssignmentCountArgs";
import { ContractorAssignmentFindManyArgs } from "./ContractorAssignmentFindManyArgs";
import { ContractorAssignmentFindUniqueArgs } from "./ContractorAssignmentFindUniqueArgs";
import { CreateContractorAssignmentArgs } from "./CreateContractorAssignmentArgs";
import { UpdateContractorAssignmentArgs } from "./UpdateContractorAssignmentArgs";
import { DeleteContractorAssignmentArgs } from "./DeleteContractorAssignmentArgs";
import { Contractor } from "../../contractor/base/Contractor";
import { ProjectStage } from "../../projectStage/base/ProjectStage";
import { ContractorAssignmentService } from "../contractorAssignment.service";
@graphql.Resolver(() => ContractorAssignment)
export class ContractorAssignmentResolverBase {
  constructor(protected readonly service: ContractorAssignmentService) {}

  async _contractorAssignmentsMeta(
    @graphql.Args() args: ContractorAssignmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ContractorAssignment])
  async contractorAssignments(
    @graphql.Args() args: ContractorAssignmentFindManyArgs
  ): Promise<ContractorAssignment[]> {
    return this.service.contractorAssignments(args);
  }

  @graphql.Query(() => ContractorAssignment, { nullable: true })
  async contractorAssignment(
    @graphql.Args() args: ContractorAssignmentFindUniqueArgs
  ): Promise<ContractorAssignment | null> {
    const result = await this.service.contractorAssignment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ContractorAssignment)
  async createContractorAssignment(
    @graphql.Args() args: CreateContractorAssignmentArgs
  ): Promise<ContractorAssignment> {
    return await this.service.createContractorAssignment({
      ...args,
      data: {
        ...args.data,

        contractor: args.data.contractor
          ? {
              connect: args.data.contractor,
            }
          : undefined,

        projectStage: args.data.projectStage
          ? {
              connect: args.data.projectStage,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ContractorAssignment)
  async updateContractorAssignment(
    @graphql.Args() args: UpdateContractorAssignmentArgs
  ): Promise<ContractorAssignment | null> {
    try {
      return await this.service.updateContractorAssignment({
        ...args,
        data: {
          ...args.data,

          contractor: args.data.contractor
            ? {
                connect: args.data.contractor,
              }
            : undefined,

          projectStage: args.data.projectStage
            ? {
                connect: args.data.projectStage,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContractorAssignment)
  async deleteContractorAssignment(
    @graphql.Args() args: DeleteContractorAssignmentArgs
  ): Promise<ContractorAssignment | null> {
    try {
      return await this.service.deleteContractorAssignment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Contractor, {
    nullable: true,
    name: "contractor",
  })
  async getContractor(
    @graphql.Parent() parent: ContractorAssignment
  ): Promise<Contractor | null> {
    const result = await this.service.getContractor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => ProjectStage, {
    nullable: true,
    name: "projectStage",
  })
  async getProjectStage(
    @graphql.Parent() parent: ContractorAssignment
  ): Promise<ProjectStage | null> {
    const result = await this.service.getProjectStage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
